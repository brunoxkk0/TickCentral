import groovy.swing.SwingBuilder

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'


version = "3.2"
group = "com.github.terminatornl.tickcentral" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickCentral"

def taskNames = project.gradle.startParameter.taskNames
if(!taskNames.contains("sign")){
    version = "$version-testing"
}
if (taskNames.contains("jar") || taskNames.find {it.toLowerCase().startsWith("publish")}) {
    version = "$version-dev"
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    ///home/predator/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp
    version = "1.12.2-14.23.5.2847"
    runDir = "run"

    replaceIn "TickCentral.java"
    replace '${version}', project.version
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task installToObfServer << {
    delete fileTree('run_server_obf/mods') {
        include "$archivesBaseName*"
    }
    println("Copying " + jar.archivePath + " into run_server_obf/mods")
    copy {
        from jar.archivePath
        into "run_server_obf/mods"
    }
}

task sign << {

}

jar {
    manifest.attributes(
            'FMLCorePlugin': 'com.github.terminatornl.tickcentral.TickCentral'
    )
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.gradle.startParameter.taskNames.contains("sign")
    }
    if (project.gradle.startParameter.taskNames.contains("sign")) {


        String password

        if (password == null) {
            if (System.console() != null) {
                password = new String(System.console().readPassword("Keystore password"))
            } else {
                new SwingBuilder().edt {
                    dialog(modal: true,
                            title: 'Keystore password',
                            alwaysOnTop: true,
                            resizable: false,
                            locationRelativeTo: null,
                            pack: true,
                            show: true
                    ) {
                        vbox {
                            label(text: "                                                ")
                            input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                password = new String(input.password);
                                dispose();
                            })
                        }
                    }
                }
            }
        }

        if (password == null || password.size() < 1) {
            throw new GradleException("No password supplied")
        }

        alias = "TerminatorNL"
        keyStore = "keystore.jks"
        storePass = password
        keyPass = password

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}
installToObfServer.dependsOn build
build.dependsOn signJar

publishing { // for the publishToMavenLocal task
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
